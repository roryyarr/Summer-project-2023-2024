var documenterSearchIndex = {"docs":
[{"location":"vem_problem/#VEM-Problem-Module","page":"VEM Problem Module","title":"VEM Problem Module","text":"","category":"section"},{"location":"vem_problem/","page":"VEM Problem Module","title":"VEM Problem Module","text":"The vem_problem module defines the structure of VEM problems.","category":"page"},{"location":"vem_problem/#Available-Types","page":"VEM Problem Module","title":"Available Types","text":"","category":"section"},{"location":"vem_problem/","page":"VEM Problem Module","title":"VEM Problem Module","text":"vem_problem.Mesh","category":"page"},{"location":"vem_problem/#Main.vem_problem.Mesh","page":"VEM Problem Module","title":"Main.vem_problem.Mesh","text":"struct Mesh\n\nRepresents a mesh structure used in the Virtual Element Method (VEM).\n\nFields:\n\nboundary::Vector{Int64}: A vector containing the indices of boundary vertices.\nelements::Vector{Vector{Int64}}: A vector of vectors where each inner vector represents an element (e.g., triangle or polygon) by the indices of its vertices.\nvertices::Vector{Tuple{Float64, Float64}}: A vector of tuples where each tuple represents the coordinates (x, y) of a vertex.\n\nThis struct is essential for defining the geometric domain in VEM computations.\n\n\n\n\n\n","category":"type"},{"location":"plot_solution/#Plot-Solution-Module","page":"Plot Solution Module","title":"Plot Solution Module","text":"","category":"section"},{"location":"plot_solution/","page":"Plot Solution Module","title":"Plot Solution Module","text":"The plot_solution module provides functions for visualizing solutions.","category":"page"},{"location":"plot_solution/#Available-Functions","page":"Plot Solution Module","title":"Available Functions","text":"","category":"section"},{"location":"plot_solution/","page":"Plot Solution Module","title":"Plot Solution Module","text":"plot_solution.plot_heatmap\nplot_solution.plot_wireframe","category":"page"},{"location":"plot_solution/#Main.plot_solution.plot_heatmap","page":"Plot Solution Module","title":"Main.plot_solution.plot_heatmap","text":"plot_heatmap(mesh::Mesh, solution::Vector{Float64}; colourscheme=:blues, show_colorbar=true, savepath=nothing)\n\nPlot an interpolated heatmap over a mesh structure with optional cell boundaries, color scheme, and color bar.\n\nArguments\n\nmesh::Mesh: A Mesh struct containing the boundary vertices, elements (polygons), and vertex coordinates.\nsolution::Vector{Float64}: A vector containing the solution values (e.g., temperature, potential) for each vertex.\n\nKeyword Arguments\n\nptitle: A string specifying the plot title.\ncolourscheme: A symbol representing the color scheme to use for the heatmap. Default is :blues, but can be any valid color scheme (e.g., :viridis, :plasma).\nshow_colorbar::Bool: A boolean flag that determines whether the color bar is shown. Default is true (color bar shown). Set to false to hide the color bar.\nsavepath: A string specifying the file path to save the plot. If not provided, the plot will be displayed instead.\n\nBehavior\n\nThe function will plot the heatmap by interpolating the solution values over the mesh.\nIt fills each element (polygon/triangle) in the mesh with interpolated colors, using the specified color scheme.\nThe x and y axis limits are automatically set based on the mesh vertices.\nIf ptitle is provided it adds the string as the title. Otherwise no title will be displayed.\nThe color bar can be toggled on or off using the show_colorbar argument.\nIf savepath is provided, the plot will be saved to the specified file path. Otherwise, the plot will be displayed interactively.\n\n# Using the default 'blues' color scheme and showing the color bar\nplot_heatmap(mesh, solution)\n\n# Using the 'plasma' color scheme and hiding the color bar\nplot_heatmap(mesh, solution; colourscheme=:plasma, show_colorbar=false, savepath = \"heatmap_plot.png\")\n\n\n\n\n\n","category":"function"},{"location":"plot_solution/#Main.plot_solution.plot_wireframe","page":"Plot Solution Module","title":"Main.plot_solution.plot_wireframe","text":"plot_wireframe(mesh::Mesh, heights::Vector{Float64}; azimuth=30, elevation=30, solidcolour=nothing, colourscheme=:viridis, savepath=nothing)\n\nPlot a 3D wireframe of a mesh with either a solid color or a color scheme based on vertex heights. Optionally, save the plot to a file.\n\nArguments\n\nmesh::Mesh: A Mesh struct containing the boundary vertices, elements (polygons), and vertex coordinates.\nheights::Vector{Float64}: A vector containing the heights (z-coordinates) of each vertex.\n\nKeyword Arguments\n\nIf ptitle is provided it adds the string as the title. Otherwise no title will be displayed.\nazimuth::Float64: The azimuth angle (horizontal rotation) for viewing the 3D plot. Default is 30.\nelevation::Float64: The elevation angle (vertical rotation) for viewing the 3D plot. Default is 30.\nsolidcolour: A solid color for the wireframe (e.g., :red, :blue). If provided, it overrides the color scheme.\ncolourscheme: A color scheme symbol (e.g., :viridis, :plasma) to color the wireframe based on vertex heights. Default is :viridis.\nsavepath: A string specifying the file path to save the plot. If not provided, the plot will be displayed instead.\n\nBehavior\n\nCreates wireframe.\nAssigns ptitle as plot title.\nIf solidcolour is provided, all wireframe lines will be plotted with this solid color.\nIf colourscheme is provided and solidcolour is nothing, the wireframe will be colored based on vertex heights using the color scheme.\nIf savepath is provided, the plot will be saved to the specified file path. Otherwise, the plot will be displayed interactively.\n\n# Using a color scheme and saving the plot\nplot_wireframe(mesh, heights, ptitle = azimuth=45, elevation=60, colourscheme=:plasma, savepath=\"mesh_plot.png\")\n\n# Using a solid color and displaying the plot\nplot_wireframe(mesh, heights, azimuth=45, elevation=60, solidcolour=:green)\n\n\n\n\n\n","category":"function"},{"location":"L_domain/#L_domain-Documentation","page":"L_domain Documentation","title":"L_domain Documentation","text":"","category":"section"},{"location":"L_domain/","page":"L_domain Documentation","title":"L_domain Documentation","text":"This is the documentation for the L_domain module.","category":"page"},{"location":"L_domain/#Available-Functions","page":"L_domain Documentation","title":"Available Functions","text":"","category":"section"},{"location":"L_domain/","page":"L_domain Documentation","title":"L_domain Documentation","text":"L_domain.L_domain_boundary_condition\nL_domain.L_domain_rhs","category":"page"},{"location":"L_domain/#Main.L_domain.L_domain_boundary_condition","page":"L_domain Documentation","title":"Main.L_domain.L_domain_boundary_condition","text":"L_domain_boundary_condition(points::Vector{Tuple{Float64, Float64}}) -> Vector{Float64}\n\nEvaluate the boundary condition of a PDE on an L-shaped domain.\n\nArguments\n\npoints::Vector{Tuple{Float64, Float64}}: A vector of tuples where each tuple contains the x and y coordinates of a point.\n\nReturns\n\nA Vector{Float64} representing the boundary condition at each point.\n\nExample\n\n    points = [(0.1, 0.2), (0.3, 0.4), (0.5, 0.6)]\n    g = L_domain_boundary_condition(points)\n\n\n\n\n\n","category":"function"},{"location":"L_domain/#Main.L_domain.L_domain_rhs","page":"L_domain Documentation","title":"Main.L_domain.L_domain_rhs","text":"L_domain_rhs(points::Matrix{Float64}) -> Vector{Float64}\n\nEvaluate the right-hand side function of a PDE on an L-shaped domain.\n\nArguments\n\npoints::Matrix{Float64}: A matrix where each row contains the x and y coordinates of a point.\n\nReturns\n\nA Vector{Float64} representing the value of the right-hand side function at each point.\n\nExample\n\n    points = [0.1 0.2; 0.3 0.4; 0.5 0.6]\n    f = L_domain_rhs(points)\n\n\n\n\n\n","category":"function"},{"location":"square_domain/#Square-Domain-Module","page":"Square Domain Module","title":"Square Domain Module","text":"","category":"section"},{"location":"square_domain/","page":"Square Domain Module","title":"Square Domain Module","text":"The square_domain module provides functionality to work with square domains.","category":"page"},{"location":"square_domain/#Available-Functions","page":"Square Domain Module","title":"Available Functions","text":"","category":"section"},{"location":"square_domain/","page":"Square Domain Module","title":"Square Domain Module","text":"square_domain.square_domain_boundary_condition\nsquare_domain.square_domain_rhs","category":"page"},{"location":"square_domain/#Main.square_domain.square_domain_boundary_condition","page":"Square Domain Module","title":"Main.square_domain.square_domain_boundary_condition","text":"square_domain_boundary_condition(points::Vector{Tuple{Float64, Float64}}) -> Vector{Float64}\n\nCompute the boundary condition for a square domain problem.\n\nArguments\n\npoints::Vector{Tuple{Float64, Float64}}: A vector of tuples representing the x and y coordinates of the points on the boundary.\n\nReturns\n\nA Vector{Float64} representing the boundary condition at the corresponding points, calculated using the formula: (1 - x) * y * sin(π * x).\n\nExample\n\n```julia\npoints = [(0.1, 0.2), (0.3, 0.4), (0.5, 0.6)]\ng = square_domain_boundary_condition(points)\n```\n\n\n\n\n\n","category":"function"},{"location":"square_domain/#Main.square_domain.square_domain_rhs","page":"Square Domain Module","title":"Main.square_domain.square_domain_rhs","text":"square_domain_rhs(points::Matrix{Float64}) -> Float64\n\nCompute the right-hand side function for a square domain problem.\n\nArguments\n\npoints::Matrix{Float64}: A matrix where each row represents the x and y coordinates of a point.\n\nReturns\n\nA Float64 value representing the right-hand side of the equation, computed using the formula: 15 * sin(π * sum(x)) * sin(π * sum(y)).\n\nExample\n\n```julia\npoints = [0.1 0.2; 0.3 0.4; 0.5 0.6]\nf = square_domain_rhs(points)\n```\n\n\n\n\n\n","category":"function"},{"location":"read_mat/#Read-Mat-Module","page":"Read Mat Module","title":"Read Mat Module","text":"","category":"section"},{"location":"read_mat/","page":"Read Mat Module","title":"Read Mat Module","text":"The read_mat module provides functionality to read .mat files.","category":"page"},{"location":"read_mat/#Available-Functions","page":"Read Mat Module","title":"Available Functions","text":"","category":"section"},{"location":"read_mat/","page":"Read Mat Module","title":"Read Mat Module","text":"read_mat.read_mat_to_vem_problem","category":"page"},{"location":"read_mat/#Main.read_mat.read_mat_to_vem_problem","page":"Read Mat Module","title":"Main.read_mat.read_mat_to_vem_problem","text":"Reads a .mat file and returns a vem_problem and mesh struct.\n\nArguments\n\nfile_path: The path to the .mat file to read.\n\nReturns\n\nA tuple (vem_problem, mesh)\n\n\n\n\n\n","category":"function"},{"location":"vem.solver/#VEM-Solver-Module","page":"VEM Solver Module","title":"VEM Solver Module","text":"","category":"section"},{"location":"vem.solver/","page":"VEM Solver Module","title":"VEM Solver Module","text":"The VEMSolver module provides functionality for solving Virtual Element Method (VEM) problems using command-line arguments, loading problem data from a .mat file, solving the VEM problem, and optionally plotting the results.","category":"page"},{"location":"vem.solver/#Available-Functions","page":"VEM Solver Module","title":"Available Functions","text":"","category":"section"},{"location":"vem.solver/#Main-Function","page":"VEM Solver Module","title":"Main Function","text":"","category":"section"},{"location":"vem.solver/","page":"VEM Solver Module","title":"VEM Solver Module","text":"The main function is the entry point that runs the VEM solver, handling argument parsing, solving the VEM problem, and generating plots.","category":"page"},{"location":"vem.solver/","page":"VEM Solver Module","title":"VEM Solver Module","text":"vem_solver.main\nvem_solver.parse_vem_args","category":"page"},{"location":"vem.solver/#Main.vem_solver.main","page":"VEM Solver Module","title":"Main.vem_solver.main","text":"Main function to parse command-line arguments and run the VEM solver.\n\n\n\n\n\n","category":"function"},{"location":"vem.solver/#Main.vem_solver.parse_vem_args","page":"VEM Solver Module","title":"Main.vem_solver.parse_vem_args","text":"Function to set up command-line argument parsing using ArgParse.\n\n\n\n\n\n","category":"function"},{"location":"#Project-Documentation","page":"Project Documentation","title":"Project Documentation","text":"","category":"section"},{"location":"","page":"Project Documentation","title":"Project Documentation","text":"This is the documentation for the various modules in the project.","category":"page"},{"location":"#Modules","page":"Project Documentation","title":"Modules","text":"","category":"section"},{"location":"","page":"Project Documentation","title":"Project Documentation","text":"Plot Solution\nRead Mat\nSquare Domain\nL Domain\nVEM Method\nVEM Problem","category":"page"},{"location":"vem_method/#VEM-Method-Module","page":"VEM Method Module","title":"VEM Method Module","text":"","category":"section"},{"location":"vem_method/","page":"VEM Method Module","title":"VEM Method Module","text":"The vem_method module implements the Virtual Element Method (VEM).","category":"page"},{"location":"vem_method/#Available-Functions","page":"VEM Method Module","title":"Available Functions","text":"","category":"section"},{"location":"vem_method/","page":"VEM Method Module","title":"VEM Method Module","text":"vem_method.vem","category":"page"},{"location":"vem_method/#Main.vem_method.vem","page":"VEM Method Module","title":"Main.vem_method.vem","text":"vem(mesh::Mesh, rhs::Function, boundary_condition::Function; debug::Bool=false, debug_file_path::String=\"vem_debug_output.md\")::Vector{Float64}\n\nSolve a boundary value problem using the Virtual Element Method (VEM) on a given mesh.\n\nArguments\n\nmesh::Mesh: A mesh structure containing vertices, elements and boundaries (polygons).\nrhs::Function: The right-hand side function of the boundary value problem.\nboundary_condition::Function: The function specifying boundary conditions.\n\nKeyword Arguments\n\ndebug::Bool: If true, generates a detailed debug output in the specified file. Default is false.\ndebug_file_path::String: The path to the debug output file. Default is \"vem_debug_output.md\".\n\nReturns\n\nu::Vector{Float64}: A vector containing the solution (degrees of freedom) at each vertex.\n\nBehavior\n\nConstructs the global stiffness matrix K and forcing vector F by looping over the mesh elements.\nApplies the boundary conditions and solves the system K * u = F to compute the solution u.\nIf debugging is enabled, it writes detailed information about the computation process to the specified file.\n\nExample\n\n```julia u = vem(mesh, rhsfunction, boundarycondition_function; debug=true)\n\n\n\n\n\n","category":"function"}]
}
